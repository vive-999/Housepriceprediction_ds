# -*- coding: utf-8 -*-
"""BengalaruHousePrice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FHHgzQ3uWvy6zyQEvcPf27LReMn0PkvO
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline
import matplotlib
matplotlib.rcParams['figure.figsize'] = (20,10)

df = pd.read_csv('/content/Bengaluru_House_Data.csv')

df.shape

"""**Let me be a text Cell**"""

df.head()

df.groupby('area_type')['area_type'].agg('count')

df.sample()

"""**DATA CLEANING**"""

df.head()

df.groupby('area_type')['area_type'].agg('count')

df1 = df.drop(['area_type','availability','society'], axis = 1)

df1

df1.isnull().sum()

df2 = df1.dropna()

df2.isnull().sum()

df2.shape

df2.head(10)

df2['size'].unique()

df2['bhk'] = df2['size'].apply(lambda x: int(x.split(' ')[0]))

df2.sample(10)

df2.drop(['size'], axis= 'columns')

df2.bhk.unique()

df2[df2.bhk > 20]

df2.total_sqft.unique()

def is_float(x):
  try:
    float(x)
  except:
    return False
  return True

df2[~df2['total_sqft'].apply(is_float)].head(10)

def convert_sqft_to_num(x):
  tokens = x.split('-')
  if len(tokens) ==2:
    return (float(tokens[0]) + float(tokens[1]))/2
  try:
      return float(x)
  except:
      return None

"""df3 = df2.copy()"""

df3 = df2.copy()

df3['total_sqft'] = df3['total_sqft'].apply(convert_sqft_to_num)

df3.total_sqft.dtype

df2.total_sqft.dtype

df3.iloc[30]

"""**Feature Engineering and Dimensionality Reduction**"""

df4 = df3.copy()

df4.sample()

df4['price_persqft'] = df4['price'] * 100000/df4['total_sqft']

df4.sample(10)

len(df4.location.unique())

df4.location = df4.location.apply(lambda x: x.strip())

location_stats = df4.groupby('location')['location'].agg('count')
len(location_stats)

len(location_stats[location_stats<=10])

location_stats_less_than_10 = location_stats[location_stats<=10]
len(df4.location.unique())

df4['location'] = df4.location.apply(lambda x: 'Other' if x in location_stats_less_than_10 else x)

len(df4.location.unique())
len(df3.location.unique())

